const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const { sql, connectDB } = require('./db');
const app = express();

// ÊúÄÂÆΩÊùæÁöÑCORSÈÖçÁΩÆ - ÂÖÅËÆ∏ÊâÄÊúâÊù•Ê∫êËÆøÈóÆÔºàÂºÄÂèë/ÊµãËØïÁéØÂ¢É‰ΩøÁî®Ôºâ
app.use(cors({
  origin: true, // ÂÖÅËÆ∏ÊâÄÊúâÊù•Ê∫êÔºàÂä®ÊÄÅËøîÂõûËØ∑Ê±ÇÁöÑoriginÔºâ
  credentials: true, // ÂÖÅËÆ∏Êê∫Â∏¶Âá≠ËØÅÔºàcookies, authorization headersÁ≠âÔºâ
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'], // ÂÖÅËÆ∏ÊâÄÊúâÂ∏∏Áî®HTTPÊñπÊ≥ï
  allowedHeaders: '*', // ÂÖÅËÆ∏ÊâÄÊúâËØ∑Ê±ÇÂ§¥
  exposedHeaders: '*', // Êö¥Èú≤ÊâÄÊúâÂìçÂ∫îÂ§¥ÁªôÂâçÁ´Ø
  maxAge: 86400, // È¢ÑÊ£ÄËØ∑Ê±ÇÁºìÂ≠òÊó∂Èó¥Ôºà24Â∞èÊó∂Ôºâ
  optionsSuccessStatus: 200 // ÂÖºÂÆπÊóßÊµèËßàÂô®
}));
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

connectDB(); // ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìËøûÊé•

const fs = require('fs');
const uploadDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
  console.log('üìÅ Â∑≤Ëá™Âä®ÂàõÂª∫ uploads Êñá‰ª∂Â§π');
}


// Ê≥®ÂÜåÊé•Âè£
app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  try {
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áî®Êà∑
    const check = await sql.query`SELECT * FROM users WHERE username = ${username}`;
    if (check.recordset.length > 0) {
      return res.json({ success: false, message: 'Áî®Êà∑ÂêçÂ∑≤Â≠òÂú®' });
    }

    // ÊèíÂÖ•Êñ∞Áî®Êà∑
    await sql.query`INSERT INTO users (username, password) VALUES (${username}, ${password})`;
    res.json({ success: true, message: 'Ê≥®ÂÜåÊàêÂäü' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: 'Êï∞ÊçÆÂ∫ìÈîôËØØ' });
  }
});

// ÁôªÂΩïÊé•Âè£
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const result = await sql.query`
      SELECT * FROM users WHERE username = ${username} AND password = ${password}
    `;
    if (result.recordset.length > 0) {
      res.json({ success: true, message: 'ÁôªÂΩïÊàêÂäü', user: result.recordset[0] });
    } else {
      res.json({ success: false, message: 'Áî®Êà∑ÂêçÊàñÂØÜÁ†ÅÈîôËØØ' });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: 'Êï∞ÊçÆÂ∫ìÈîôËØØ' });
  }
});

//‰∏ä‰º†Â§¥ÂÉè
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, './uploads/');
  },
  filename: (req, file, cb) => {
    const uniqueName = Date.now() + '-' + file.originalname;
    cb(null, uniqueName);
  }
});
const upload = multer({ storage });

// ‰∏ä‰º†Â§¥ÂÉèÂπ∂Êõ¥Êñ∞Êï∞ÊçÆÂ∫ì
app.post('/uploadAvatar', upload.single('avatar'), async (req, res) => {
  if (!req.file) return res.json({ success: false, message: 'Êú™ÈÄâÊã©ÂõæÁâá' });

  const { id } = req.body;
  const avatarUrl = `http://localhost:3000/uploads/${req.file.filename}`;

  try {
    await connectDB();
    const request = new sql.Request();
    request.input('id', sql.Int, id);
    request.input('avatar', sql.NVarChar, avatarUrl);
    await request.query('UPDATE users SET avatar=@avatar WHERE id=@id');

    res.json({ success: true, avatarUrl, message: 'Â§¥ÂÉèÊõ¥Êñ∞ÊàêÂäü' });
  } catch (err) {
    console.error('‚ùå Â§¥ÂÉè‰∏ä‰º†Â§±Ë¥•Ôºö', err);
    res.json({ success: false, message: 'Â§¥ÂÉèÊõ¥Êñ∞Â§±Ë¥•' });
  }
});



///Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØÊé•Âè£
app.post('/updateUser', async (req, res) => {
  const { id, username, avatar, password } = req.body;
  try {
    // ‰ΩøÁî® connectDB Âª∫Á´ãËøûÊé•ÔºàÂ∑≤ÁªèÂÖ®Â±ÄÈÖçÁΩÆ‰∫ÜÔºâ
    await connectDB();

    let sqlText = 'UPDATE users SET username = @username, avatar = @avatar';
    if (password) sqlText += ', password = @password';
    sqlText += ' WHERE id = @id';

    //  Áî® sql.request() ÂàõÂª∫ËØ∑Ê±Ç
    const request = new sql.Request();
    request.input('username', sql.NVarChar, username);
    request.input('avatar', sql.NVarChar, avatar);
    if (password) request.input('password', sql.NVarChar, password);
    request.input('id', sql.Int, id);

    await request.query(sqlText);

    res.json({ success: true, message: 'Êõ¥Êñ∞ÊàêÂäü' });
  } catch (err) {
    console.error('‚ùå Êõ¥Êñ∞Â§±Ë¥•Ôºö', err);
    res.json({ success: false, message: 'Êõ¥Êñ∞Â§±Ë¥•' });
  }
});



// Ëé∑ÂèñÁî®Êà∑Êî∂Ëóè
app.get('/favorites/:userId', async (req, res) => {
  const userId = req.params.userId;
  try {
    const result = await sql.query`SELECT musicId, createdAt FROM favorites WHERE userId = ${userId} ORDER BY createdAt DESC`;
    res.json({ success: true, data: result.recordset });
  } catch (err) {
    console.error('‚ùå Ëé∑ÂèñÊî∂ËóèÂ§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: 'Ëé∑ÂèñÊî∂ËóèÂ§±Ë¥•' });
  }
});

// Êñ∞Â¢ûÊî∂Ëóè
app.post('/favorites/add', async (req, res) => {
  const { userId, musicId } = req.body;
  console.log('üéµ [DEBUG] Êî∂ËóèÊé•Âè£Ë¢´Ë∞ÉÁî®');
  console.log('  ‚îú‚îÄ ËØ∑Ê±Ç‰Ωì:', req.body);
  console.log('  ‚îú‚îÄ userId:', userId, 'Á±ªÂûã:', typeof userId);
  console.log('  ‚îî‚îÄ musicId:', musicId, 'Á±ªÂûã:', typeof musicId);
  
  try {
    console.log('  ‚îú‚îÄ ÂáÜÂ§áÊèíÂÖ•Êï∞ÊçÆÂ∫ì...');
    await sql.query`
      INSERT INTO favorites (userId, musicId)
      VALUES (${userId}, ${musicId})
    `;
    console.log('  ‚îî‚îÄ ‚úÖ Êï∞ÊçÆÂ∫ìÊèíÂÖ•ÊàêÂäü');
    res.json({ success: true, message: 'Êî∂ËóèÊàêÂäü' });
  } catch (err) {
    console.error('  ‚îî‚îÄ ‚ùå Êî∂ËóèÂ§±Ë¥•Ôºö', err);
    console.error('      ËØ¶ÁªÜÈîôËØØ:', err.message);
    res.status(500).json({ success: false, message: 'Êî∂ËóèÂ§±Ë¥•' });
  }
});

// Âà†Èô§Êî∂Ëóè
app.post('/favorites/delete', async (req, res) => {
  const { userId, musicId } = req.body;
  console.log('üóëÔ∏è  [DEBUG] Âà†Èô§Êî∂ËóèÊé•Âè£Ë¢´Ë∞ÉÁî®');
  console.log('  ‚îú‚îÄ ËØ∑Ê±Ç‰Ωì:', req.body);
  console.log('  ‚îú‚îÄ userId:', userId, 'Á±ªÂûã:', typeof userId);
  console.log('  ‚îî‚îÄ musicId:', musicId, 'Á±ªÂûã:', typeof musicId);
  
  try {
    console.log('  ‚îú‚îÄ ÂáÜÂ§á‰ªéÊï∞ÊçÆÂ∫ìÂà†Èô§...');
    await sql.query`
      DELETE FROM favorites WHERE userId = ${userId} AND musicId = ${musicId}
    `;
    console.log('  ‚îî‚îÄ ‚úÖ Êï∞ÊçÆÂ∫ìÂà†Èô§ÊàêÂäü');
    res.json({ success: true, message: 'Â∑≤ÂèñÊ∂àÊî∂Ëóè' });
  } catch (err) {
    console.error('  ‚îî‚îÄ ‚ùå Âà†Èô§Êî∂ËóèÂ§±Ë¥•Ôºö', err);
    console.error('      ËØ¶ÁªÜÈîôËØØ:', err.message);
    res.status(500).json({ success: false, message: 'Âà†Èô§Êî∂ËóèÂ§±Ë¥•' });
  }
});

// Ëé∑ÂèñÊí≠ÊîæÂéÜÂè≤
app.get('/history/:userId', async (req, res) => {
  const userId = req.params.userId;
  try {
    const result = await sql.query`SELECT musicId, playedAt FROM history WHERE userId = ${userId} ORDER BY playedAt DESC`;
    res.json({ success: true, data: result.recordset });
  } catch (err) {
    console.error('‚ùå Ëé∑ÂèñÂéÜÂè≤Â§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: 'Ëé∑ÂèñÂéÜÂè≤Â§±Ë¥•' });
  }
});

// Êñ∞Â¢ûÊí≠ÊîæÂéÜÂè≤ÔºàËá™Âä®ÂéªÈáçÔºâ
app.post('/history/add', async (req, res) => {
  const { userId, musicId } = req.body;
  console.log('üïí [DEBUG] Êí≠ÊîæÂéÜÂè≤Êé•Âè£Ë¢´Ë∞ÉÁî®');
  console.log('  ‚îú‚îÄ ËØ∑Ê±Ç‰Ωì:', req.body);
  console.log('  ‚îú‚îÄ userId:', userId, 'Á±ªÂûã:', typeof userId);
  console.log('  ‚îî‚îÄ musicId:', musicId, 'Á±ªÂûã:', typeof musicId);
  
  try {
    // Âà†Èô§ÊóßËÆ∞ÂΩï
    console.log('  ‚îú‚îÄ ÂáÜÂ§áÂà†Èô§ÊóßËÆ∞ÂΩï...');
    await sql.query`
      DELETE FROM history WHERE userId = ${userId} AND musicId = ${musicId}
    `;
    console.log('  ‚îú‚îÄ ÊóßËÆ∞ÂΩïÂà†Èô§ÂÆåÊàê');
    
    // ÊèíÂÖ•Êñ∞ËÆ∞ÂΩï
    console.log('  ‚îú‚îÄ ÂáÜÂ§áÊèíÂÖ•Êñ∞ËÆ∞ÂΩï...');
    await sql.query`
      INSERT INTO history (userId, musicId)
      VALUES (${userId}, ${musicId})
    `;
    console.log('  ‚îî‚îÄ ‚úÖ Êí≠ÊîæÂéÜÂè≤ÊèíÂÖ•ÊàêÂäü');
    res.json({ success: true, message: 'ÂéÜÂè≤Â∑≤Êõ¥Êñ∞' });
  } catch (err) {
    console.error('  ‚îî‚îÄ ‚ùå Ê∑ªÂä†ÂéÜÂè≤Â§±Ë¥•Ôºö', err);
    console.error('      ËØ¶ÁªÜÈîôËØØ:', err.message);
    res.status(500).json({ success: false, message: 'Ê∑ªÂä†ÂéÜÂè≤Â§±Ë¥•' });
  }
});

// Ê∏ÖÁ©∫Êî∂ËóèËÆ∞ÂΩï
app.post('/favorites/clear', async (req, res) => {
  const { userId } = req.body;
  try {
    await sql.query`DELETE FROM favorites WHERE userId = ${userId}`;
    res.json({ success: true, message: 'Â∑≤Ê∏ÖÁ©∫Êî∂ËóèËÆ∞ÂΩï' });
  } catch (err) {
    console.error('‚ùå Ê∏ÖÁ©∫Êî∂ËóèÂ§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: 'Ê∏ÖÁ©∫Êî∂ËóèÂ§±Ë¥•' });
  }
});

// Ê∏ÖÁ©∫Êí≠ÊîæÂéÜÂè≤
app.post('/history/clear', async (req, res) => {
  const { userId } = req.body;
  try {
    await sql.query`DELETE FROM history WHERE userId = ${userId}`;
    res.json({ success: true, message: 'Â∑≤Ê∏ÖÁ©∫Êí≠ÊîæÂéÜÂè≤' });
  } catch (err) {
    console.error('‚ùå Ê∏ÖÁ©∫Êí≠ÊîæÂéÜÂè≤Â§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: 'Ê∏ÖÁ©∫Êí≠ÊîæÂéÜÂè≤Â§±Ë¥•' });
  }
});

//‰∏ãËΩΩÊ®°Âùó
const axios = require('axios');

// ÂàõÂª∫ downloads Êñá‰ª∂Â§π
const downloadsDir = path.join(__dirname, 'downloads');
if (!fs.existsSync(downloadsDir)) {
  fs.mkdirSync(downloadsDir);
  console.log('üìÅ Â∑≤Ëá™Âä®ÂàõÂª∫ downloads Êñá‰ª∂Â§π');
}

app.post('/downloads/add', async (req, res) => {
  const { userId, musicId, songName, artist, album, coverUrl, fileUrl, lyricsUrl } = req.body;

  if (!fileUrl || !musicId) {
    return res.status(400).json({ success: false, message: 'Áº∫Â∞ë fileUrl Êàñ musicId' });
  }

  try {
    // ‰∏ãËΩΩÊ≠åÊõ≤
    const response = await axios({ url: fileUrl, method: 'GET', responseType: 'stream' });
    const safeName = `${songName}_${musicId}`.replace(/[\\/:*?"<>| ]/g, '_');
    const audioPath = path.join(downloadsDir, `${safeName}.mp3`);
    const writer = fs.createWriteStream(audioPath);
    response.data.pipe(writer);
    await new Promise((resolve, reject) => { writer.on('finish', resolve); writer.on('error', reject); });
    const localPath = `http://localhost:3000/downloads/files/${safeName}.mp3`;

    // ‰∏ãËΩΩÊ≠åËØç
    let lyricsPath = null;
    let lyricsStatus = 0;
    if (req.body.lyricsText) {
      try {
        const lrcPath = path.join(downloadsDir, `${safeName}.lrc`);
        fs.writeFileSync(lrcPath, req.body.lyricsText, 'utf-8');
        lyricsPath = `http://localhost:3000/downloads/files/${safeName}.lrc`;
        lyricsStatus = 1;
      } catch (err) {
        console.warn('‚ö†Ô∏è Ê≠åËØçÁîüÊàêÂ§±Ë¥•', err.message);
      }
    }

    // ÂÜôÂÖ•Êï∞ÊçÆÂ∫ì
    await sql.query`
      INSERT INTO DownloadedSongs 
        (userId, musicId, songName, artist, album, coverUrl, localPath, status, lyricsPath, lyricsStatus)
      VALUES
        (${userId}, ${musicId}, ${songName}, ${artist}, ${album}, ${coverUrl}, ${localPath}, 1, ${lyricsPath}, ${lyricsStatus})
    `;

    res.json({ success: true, message: '‰∏ãËΩΩÂÆåÊàê', path: localPath, lyricsPath });

  } catch (err) {
    console.error('‚ùå ‰∏ãËΩΩÂ§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: '‰∏ãËΩΩÂ§±Ë¥•', error: err.message });
  }
});


//Ëé∑ÂèñÁî®Êà∑‰∏ãËΩΩÂàóË°®
app.get('/downloads/:userId', async (req, res) => {
  const userId = req.params.userId;
  try {
    const result = await sql.query`
      SELECT * FROM DownloadedSongs WHERE userId = ${userId} ORDER BY downloadTime DESC
    `;
    res.json({ success: true, data: result.recordset });
  } catch (err) {
    console.error('‚ùå Ëé∑Âèñ‰∏ãËΩΩÂàóË°®Â§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: 'Ëé∑ÂèñÂ§±Ë¥•' });
  }
});


// Âà†Èô§‰∏ãËΩΩËÆ∞ÂΩïÔºàÂêåÊó∂Âà†Èô§Êú¨Âú∞Êñá‰ª∂Ôºâ
app.post('/downloads/delete', async (req, res) => {
  const { downloadId } = req.body;
  if (!downloadId) {
    return res.status(400).json({ success: false, message: 'Áº∫Â∞ë downloadId' });
  }

  try {
    const result = await sql.query`
      SELECT localPath FROM DownloadedSongs WHERE downloadId = ${downloadId}
    `;
    if (result.recordset.length === 0) {
      return res.json({ success: false, message: 'ËÆ∞ÂΩï‰∏çÂ≠òÂú®' });
    }

    // Âà†Èô§Êú¨Âú∞Êñá‰ª∂
    const localUrl = result.recordset[0].localPath;
    const fileName = localUrl.split('/downloads/files/')[1];
    const filePath = path.join(downloadsDir, fileName);
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log(`üóëÔ∏è Â∑≤Âà†Èô§Êñá‰ª∂: ${filePath}`);
    }

    // Âà†Èô§Êï∞ÊçÆÂ∫ìËÆ∞ÂΩï
    await sql.query`DELETE FROM DownloadedSongs WHERE downloadId = ${downloadId}`;
    res.json({ success: true, message: 'Âà†Èô§ÊàêÂäü' });

  } catch (err) {
    console.error('‚ùå Âà†Èô§Â§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: 'Âà†Èô§Â§±Ë¥•' });
  }
});

// Ê∏ÖÁ©∫‰∏ãËΩΩËÆ∞ÂΩï
app.post('/downloads/clear', async (req, res) => {
  const { userId } = req.body;
  if (!userId) return res.status(400).json({ success: false, message: 'Áº∫Â∞ë userId' });

  try {
    await sql.query`DELETE FROM DownloadedSongs WHERE userId = ${userId}`;
    res.json({ success: true, message: 'Â∑≤Ê∏ÖÁ©∫‰∏ãËΩΩËÆ∞ÂΩï' });
  } catch (err) {
    console.error('‚ùå Ê∏ÖÁ©∫‰∏ãËΩΩÂ§±Ë¥•Ôºö', err);
    res.status(500).json({ success: false, message: 'Ê∏ÖÁ©∫‰∏ãËΩΩÂ§±Ë¥•' });
  }
});



// Êèê‰æõÈùôÊÄÅËÆøÈóÆ‰∏ãËΩΩÊñá‰ª∂
app.use('/downloads/files', express.static(path.join(__dirname, 'downloads')));







app.listen(3000, () => console.log('üéµ Server running on http://localhost:3000'));
